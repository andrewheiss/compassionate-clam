{
  "hash": "23d470e73dd024c0efd8cf39430c396c",
  "result": {
    "markdown": "---\ntitle: Model details\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(targets)\nlibrary(brms)\nlibrary(marginaleffects)\nlibrary(tidybayes)\nlibrary(ggdist)\nlibrary(patchwork)\nlibrary(scales)\n\n# Generated via random.org\nset.seed(196491)\n\n# Load targets\ntar_load(ongo)\ntar_load(m_full_ordbeta)\ninvisible(list2env(tar_read(graphic_functions), .GlobalEnv))\n\nprop_to_provinces <- function(x, lower = 1, upper = 32) {\n  (x * (upper - lower)) + lower\n}\n```\n:::\n\n\nTODO: Formal definition and justification for ordered beta instead of ZOIB\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfull_posterior <- predicted_draws(m_full_ordbeta, \n                                  newdata = m_full_ordbeta$data, \n                                  ndraws = 100)\n\nposterior_categories <- full_posterior %>% \n  ungroup() %>% \n  mutate(outcome = case_when(\n    .prediction == 0 ~ \"1\",\n    .prediction > 0 & .prediction < 1 ~ \"1–32\",\n    .prediction == 1 ~ \"32\"\n  )) %>% \n  group_by(outcome, .draw) %>% \n  summarize(count = n()) %>% \n  ungroup()\n\nactual_counts <- m_full_ordbeta$data |> \n  mutate(outcome = case_when(\n    province_count == 0 ~ \"1\",\n    province_count > 0 & province_count < 1 ~ \"1–32\",\n    province_count == 1 ~ \"32\"\n  )) |> \n  group_by(outcome) |> \n  summarize(count = n())\n\nplot_categories <- posterior_categories %>% \n  ggplot(aes(x = outcome, y = count)) +\n  geom_col(data = actual_counts, fill = \"grey70\") +\n  stat_pointinterval() +\n  labs(x = NULL, y = \"Observed and predicted counts\",\n       title = \"Posterior predictions of discrete and continuous outcomes\") +\n  coord_cartesian(ylim = c(0, 300)) +\n  theme_ongo()\n\nactual_middle <- m_full_ordbeta$data |> \n  filter(province_count > 0 & province_count < 1) |> \n  mutate(province_count = prop_to_provinces(province_count)) \n\nplot_continuous <- full_posterior |> \n  mutate(.prediction = prop_to_provinces(.prediction)) |> \n  filter(.prediction > 1 & .prediction < 32) |> \n  ggplot(aes(x = .prediction, group = .draw)) +\n  geom_density(linewidth = 0.05, bounds = c(1, 32)) +\n  geom_density(data = actual_middle, aes(x = province_count),\n               inherit.aes = FALSE, bounds = c(1, 32)) +\n  labs(x = \"Discrete and continuous predicted outcomes\",\n       y = \"Probability density\") +\n  theme_ongo()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narrow_part <- ggplot() +\n  annotate(geom = \"segment\", x = 0.35, xend = 0.65, y = 0.9, yend = 0.9) +\n  annotate(geom = \"segment\", x = 0.5, xend = 0.5, y = 0.9, yend = 0.1,\n           arrow = arrow(angle = 30, type = \"closed\", length = unit(0.1, \"inches\"))) +\n  scale_x_continuous(limits = c(0, 1)) +\n  theme_void()\n\nplot_categories / arrow_part / plot_continuous +\n  plot_layout(heights = c(0.45, 0.1, 0.45))\n```\n\n::: {.cell-output-display}\n![](model-details_files/figure-html/combined-posterior-preds-1.png){fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# ordbetareg's built-in way, just to check\n# pp_check_ordbeta(m_full_ordbeta, ndraws = 100)\n```\n:::\n\n\n\nTODO: MCMC diagnostics\n\nTODO: Timing\n",
    "supporting": [
      "model-details_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}